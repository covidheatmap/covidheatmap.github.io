{"version":3,"sources":["components/SearchBox.js","components/AppBar.js","utils/getHeatmapData.js","components/Map.js","components/App.js","serviceWorker.js","styles.js","index.js","assets/logo.png"],"names":["autocompleteService","current","geocoderService","useStyles","makeStyles","theme","autocomplete","width","breakpoints","up","optionIcon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","props","classes","React","useState","inputValue","setInputValue","loading","setLoading","options","setOptions","fetchSuggestions","useMemo","throttle","request","callback","getPlacePredictions","fetchPlace","geocode","handleInputChange","event","target","value","useEffect","active","window","google","maps","places","AutocompleteService","input","results","Autocomplete","id","size","autoComplete","blurOnSelect","disableClearable","freeSolo","className","getOptionLabel","option","description","filterOptions","x","renderInput","params","TextField","placeholder","fullWidth","onChange","inputProps","style","paddingBottom","InputProps","disableUnderline","endAdornment","InputAdornment","position","CircularProgress","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","map","match","offset","length","Grid","container","alignItems","item","xs","part","index","key","fontWeight","highlight","Typography","variant","secondary_text","Geocoder","place_id","placeId","location","geometry","setCoordinates","lat","lng","alert","handleOptionChange","card","border","boxShadow","top","left","right","zIndex","drawerPaper","appBar","borderRadius","padding","CustomAppBar","darkMode","useDarkMode","mobileOpen","setMobileOpen","handleDrawerToggle","AppBar","Toolbar","disableGutters","IconButton","edge","aria-label","onClick","Drawer","drawer","open","onClose","paper","ModalProps","keepMounted","Card","CardHeader","avatar","Avatar","src","Logo","title","process","subheader","version","CardContent","component","paragraph","Link","href","rel","FormControlLabel","control","Switch","checked","toggle","name","label","generateRandomPoint","center","radius","x0","y0","rd","u","Math","random","v","w","sqrt","t","PI","cos","sin","getHeatmapData","totalPoints","latitude","longitude","zoom","points","positions","opacity","i","randomPoint","weight","Marker","children","styledMapDark","StyledMapType","StyledMapDark","styledMapLight","StyledMapLight","Map","useTheme","mapRef","useRef","mapMode","heatmapData","setHeatmapData","setZoom","coordinates","hasGeoCoordinates","setMapTypeId","bootstrapURLKeys","language","region","fullscreenControl","mapTypeControl","mapTypeControlOptions","ControlPosition","BOTTOM_CENTER","mapTypeIds","maxZoom","minZoom","scaleControl","zoomControl","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","mapTypes","set","heatmapLibrary","heatmap","primary","Container","styled","div","App","themeMode","setThemeMode","createMuiTheme","type","main","red","usePosition","enableHighAccuracy","ThemeProvider","CssBaseline","Boolean","hostname","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4302f5f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport parse from \"autosuggest-highlight/parse\";\r\nimport throttle from \"lodash/throttle\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst autocompleteService = { current: null };\r\nconst geocoderService = { current: null };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  autocomplete: {\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: 360,\r\n    },\r\n  },\r\n  optionIcon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function GoogleMaps(props) {\r\n  const classes = useStyles();\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n\r\n  const fetchSuggestions = React.useMemo(\r\n    () =>\r\n      throttle((request, callback) => {\r\n        autocompleteService.current.getPlacePredictions(request, callback);\r\n      }, 200),\r\n    []\r\n  );\r\n\r\n  const fetchPlace = React.useMemo(\r\n    () =>\r\n      throttle((request, callback) => {\r\n        geocoderService.current.geocode(request, callback);\r\n      }, 200),\r\n    []\r\n  );\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleOptionChange = (value) => {\r\n    if (!geocoderService.current && window.google) {\r\n      geocoderService.current = new window.google.maps.Geocoder();\r\n    }\r\n\r\n    if (value && value.place_id) {\r\n      setLoading(true);\r\n\r\n      fetchPlace({ placeId: value.place_id }, (results) => {\r\n        if (results[0]) {\r\n          const location = results[0].geometry.location;\r\n          props.setCoordinates({ lat: location.lat(), lng: location.lng() });\r\n        } else {\r\n          window.alert(\"No results found\");\r\n        }\r\n\r\n        setLoading(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!autocompleteService.current && window.google) {\r\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\r\n    }\r\n\r\n    if (!autocompleteService.current) {\r\n      return undefined;\r\n    }\r\n\r\n    if (inputValue === \"\") {\r\n      setOptions([]);\r\n      return undefined;\r\n    }\r\n\r\n    fetchSuggestions(\r\n      {\r\n        input: inputValue,\r\n      },\r\n      (results) => {\r\n        if (active) {\r\n          setOptions(results || []);\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [inputValue, fetchSuggestions]);\r\n\r\n  const renderInput = (params) => {\r\n    return (\r\n      <TextField\r\n        {...params}\r\n        placeholder=\"Pesquisar Local\"\r\n        fullWidth\r\n        onChange={handleInputChange}\r\n        inputProps={{\r\n          ...params.inputProps,\r\n          style: { paddingBottom: 2 },\r\n        }}\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          disableUnderline: true,\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              {loading ? (\r\n                <CircularProgress color=\"inherit\" size={20} />\r\n              ) : (\r\n                <SearchIcon />\r\n              )}\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderOption = (option) => {\r\n    const matches = option.structured_formatting.main_text_matched_substrings;\r\n    const parts = parse(\r\n      option.structured_formatting.main_text,\r\n      matches.map((match) => [match.offset, match.offset + match.length])\r\n    );\r\n\r\n    return (\r\n      <Grid container alignItems=\"center\">\r\n        <Grid item>\r\n          <LocationOnIcon className={classes.optionIcon} />\r\n        </Grid>\r\n        <Grid item xs>\r\n          {parts.map((part, index) => (\r\n            <span\r\n              key={index}\r\n              style={{ fontWeight: part.highlight ? 700 : 400 }}\r\n            >\r\n              {part.text}\r\n            </span>\r\n          ))}\r\n\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {option.structured_formatting.secondary_text}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"autocomplete\"\r\n      size=\"small\"\r\n      autoComplete\r\n      blurOnSelect\r\n      disableClearable\r\n      freeSolo\r\n      className={classes.autocomplete}\r\n      getOptionLabel={(option) =>\r\n        typeof option === \"string\" ? option : option.description\r\n      }\r\n      filterOptions={(x) => x}\r\n      options={options}\r\n      renderInput={(params) => renderInput(params)}\r\n      renderOption={(option) => renderOption(option)}\r\n      onChange={(event, value) => {\r\n        handleOptionChange(value);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { version } from \"../../package.json\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport useDarkMode from \"use-dark-mode\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport SearchBox from \"./SearchBox\";\r\nimport Logo from \"../assets/logo.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    border: \"none\",\r\n    boxShadow: \"none\",\r\n  },\r\n  container: {\r\n    position: \"fixed\",\r\n    top: 8,\r\n    left: 8,\r\n    right: 8,\r\n    zIndex: 10,\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      right: \"unset\",\r\n    },\r\n  },\r\n  drawerPaper: {\r\n    width: 320,\r\n  },\r\n  appBar: {\r\n    borderRadius: 8,\r\n    padding: \"0 16px\",\r\n  },\r\n}));\r\n\r\nexport default function CustomAppBar(props) {\r\n  const classes = useStyles();\r\n  const darkMode = useDarkMode(false);\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <AppBar position=\"static\" color=\"inherit\" className={classes.appBar}>\r\n        <Toolbar variant=\"dense\" disableGutters>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"Open Drawer\"\r\n            onClick={handleDrawerToggle}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <SearchBox setCoordinates={(value) => props.setCoordinates(value)} />\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        className={classes.drawer}\r\n        open={mobileOpen}\r\n        onClose={handleDrawerToggle}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        ModalProps={{\r\n          keepMounted: true,\r\n        }}\r\n      >\r\n        <Card className={classes.card}>\r\n          <CardHeader\r\n            avatar={<Avatar aria-label=\"logo\" src={Logo} />}\r\n            title={process.env.REACT_APP_TITLE}\r\n            subheader={`Versão ${version}`}\r\n          />\r\n          <CardContent>\r\n            <Typography variant=\"body2\" component=\"p\" paragraph>\r\n              {process.env.REACT_APP_DESCRIPTION}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" component=\"p\" paragraph>\r\n              Criados por estudantes e professores ligados à{\" \"}\r\n              <Link\r\n                href=\"http://www.portal.facom.ufu.br\"\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n                color=\"inherit\"\r\n              >\r\n                Faculdade de Computação (FACOM)\r\n              </Link>{\" \"}\r\n              e ao{\" \"}\r\n              <Link\r\n                href=\"http://www.ppgco.facom.ufu.br\"\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n                color=\"inherit\"\r\n              >\r\n                Programa de Pós-Graduação em Ciência da Computação (PPGCO)\r\n              </Link>{\" \"}\r\n              da{\" \"}\r\n              <Link\r\n                href=\"http://www.ufu.br\"\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n                color=\"inherit\"\r\n              >\r\n                Universidade Federal de Uberlândia (UFU)\r\n              </Link>\r\n              .\r\n            </Typography>\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={darkMode.value}\r\n                  onChange={darkMode.toggle}\r\n                  name=\"dark\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Modo Noturno\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","const generateRandomPoint = (center, radius) => {\r\n  var x0 = center.lng;\r\n  var y0 = center.lat;\r\n  // Convert Radius from meters to degrees.\r\n  var rd = radius / 111300;\r\n\r\n  var u = Math.random();\r\n  var v = Math.random();\r\n\r\n  var w = rd * Math.sqrt(u);\r\n  var t = 2 * Math.PI * v;\r\n  var x = w * Math.cos(t);\r\n  var y = w * Math.sin(t);\r\n\r\n  var xp = x / Math.cos(y0);\r\n\r\n  // Resulting point.\r\n  return { lat: y + y0, lng: xp + x0 };\r\n};\r\n\r\nconst getHeatmapData = (totalPoints, latitude, longitude, zoom) => {\r\n  const points = {\r\n    positions: [],\r\n    options: {\r\n      radius: 20,\r\n      opacity: 0.6,\r\n    },\r\n  };\r\n\r\n  for (let i = 0; i < totalPoints; i++) {\r\n    const radius = zoom * (zoom * 10);\r\n    const randomPoint = generateRandomPoint(\r\n      { lat: latitude, lng: longitude },\r\n      radius\r\n    );\r\n\r\n    points.positions[i] = {\r\n      lat: randomPoint.lat,\r\n      lng: randomPoint.lng,\r\n      weight: Math.random(),\r\n    };\r\n  }\r\n\r\n  return points;\r\n};\r\n\r\nexport default getHeatmapData;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport GoogleMap from \"google-map-react\";\r\nimport useDarkMode from \"use-dark-mode\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport MyLocationIcon from \"@material-ui/icons/MyLocation\";\r\n\r\nimport getHeatmapData from \"../utils/getHeatmapData\";\r\nimport StyledMapLight from \"../styles/map/silver.json\";\r\nimport StyledMapDark from \"../styles/map/night.json\";\r\n\r\nconst Marker = ({ children }) => children;\r\n\r\nconst styledMapDark = new window.google.maps.StyledMapType(StyledMapDark, {\r\n  name: \"Dark\",\r\n});\r\n\r\nconst styledMapLight = new window.google.maps.StyledMapType(StyledMapLight, {\r\n  name: \"Light\",\r\n});\r\n\r\nexport default function Map(props) {\r\n  const theme = useTheme();\r\n  const mapRef = useRef();\r\n  const mapMode = useDarkMode(false).value ? \"Dark\" : \"Light\";\r\n  const [heatmapData, setHeatmapData] = useState(null);\r\n  const [zoom, setZoom] = useState(15);\r\n  const { lat, lng } = props.coordinates;\r\n  const hasGeoCoordinates = lat && lng;\r\n\r\n  useEffect(() => {\r\n    const heatmapData = getHeatmapData(\r\n      process.env.REACT_APP_GOOGLE_HEATMAP_POINTS,\r\n      lat,\r\n      lng,\r\n      zoom\r\n    );\r\n\r\n    setHeatmapData(heatmapData);\r\n  }, [lat, lng, zoom]);\r\n\r\n  useEffect(() => {\r\n    if (mapRef.current) {\r\n      mapRef.current.setMapTypeId(mapMode);\r\n    }\r\n  }, [mapMode]);\r\n\r\n  const options = () => {\r\n    return {\r\n      fullscreenControl: false,\r\n      mapTypeControl: false,\r\n      mapTypeControlOptions: {\r\n        position: window.google.maps.ControlPosition.BOTTOM_CENTER,\r\n        mapTypeIds: [\"Light\", \"Dark\"],\r\n      },\r\n      maxZoom: 15,\r\n      minZoom: 13,\r\n      scaleControl: false,\r\n      zoomControl: false,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <GoogleMap\r\n      bootstrapURLKeys={{\r\n        key: process.env.REACT_APP_GOOGLE_KEY,\r\n        language: \"pt-BR\",\r\n        region: \"pt-BR\",\r\n      }}\r\n      center={hasGeoCoordinates && { lat: lat, lng: lng }}\r\n      zoom={zoom}\r\n      options={options}\r\n      yesIWantToUseGoogleMapApiInternals\r\n      onGoogleApiLoaded={({ map }) => {\r\n        mapRef.current = map;\r\n        mapRef.current.mapTypes.set(\"Light\", styledMapLight);\r\n        mapRef.current.mapTypes.set(\"Dark\", styledMapDark);\r\n        mapRef.current.setMapTypeId(mapMode);\r\n      }}\r\n      onChange={({ zoom }) => {\r\n        setZoom(zoom);\r\n      }}\r\n      heatmapLibrary={true}\r\n      heatmap={hasGeoCoordinates && heatmapData}\r\n    >\r\n      {hasGeoCoordinates && (\r\n        <Marker lat={lat} lng={lng} text=\"Localização Atual\">\r\n          <MyLocationIcon\r\n            style={{ color: theme.palette.primary }}\r\n          ></MyLocationIcon>\r\n        </Marker>\r\n      )}\r\n    </GoogleMap>\r\n  );\r\n}\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { usePosition } from \"use-position\";\r\nimport useDarkMode from \"use-dark-mode\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nimport AppBar from \"./AppBar\";\r\nimport Map from \"./Map\";\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport default function App() {\r\n  const [themeMode, setThemeMode] = useState();\r\n\r\n  // Theme\r\n  useDarkMode(false, {\r\n    onChange: (value) => {\r\n      setThemeMode(value ? \"dark\" : \"light\");\r\n    },\r\n  });\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: themeMode,\r\n          primary: {\r\n            main: red[\"A100\"],\r\n          },\r\n        },\r\n      }),\r\n    [themeMode]\r\n  );\r\n\r\n  // Get current position\r\n  const { latitude, longitude } = usePosition(\r\n    false,\r\n    useMemo(() => {\r\n      return { enableHighAccuracy: true };\r\n    }, [])\r\n  );\r\n\r\n  const [coordinates, setCoordinates] = useState({\r\n    lat: -18.918473,\r\n    lng: -48.2581763,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (latitude && longitude) {\r\n      setCoordinates({ lat: latitude, lng: longitude });\r\n    }\r\n  }, [latitude, longitude]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container>\r\n        <AppBar setCoordinates={setCoordinates} />\r\n        <Map coordinates={coordinates} />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html, body, #root {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n  \r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n      monospace;\r\n  }\r\n  \r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport GlobalStyle from \"./styles\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    <GlobalStyle />\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ce5e0dc9.png\";"],"sourceRoot":""}